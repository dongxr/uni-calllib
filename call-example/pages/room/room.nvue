<template>
  <view class="content">
	   <!-- 单人视频 -->
	<view>
		<RongCloud-Call-RCUniCallView 
			class="bigVideoView" 
			:style="{width:windowWidth+'px',height:windowHeight+'px'}"
			ref="bigVideoView">
		</RongCloud-Call-RCUniCallView>
		<RongCloud-Call-RCUniCallView
			class="smallVideoView"
			ref="smallVideoView">
		</RongCloud-Call-RCUniCallView>
		<!-- <RongCloud-Call-RCUniCallView
			v-for="(item,index) in viewArr" 
			:key="item.userId"
			class="smallVideoView"
			:ref="item.userId">
		</RongCloud-Call-RCUniCallView> -->
	</view>
		<!-- 多人视频 -->
		<!-- <view class="commView">
			<RongCloud-Call-RCUniCallView
				v-for="(item,index) in viewArr" 
				:key="item.userId"
				class="comm-show"
				:ref="item.userId">
			</RongCloud-Call-RCUniCallView>
		</view> -->
	<!-- </view> -->
	<view class="nav">
		<text class="nav-com" @click="closeCameraCur">
			{{curCamera?'关闭':'开启'}}摄像头
		</text>
		<text class="nav-com" @click="switchCamera">
			切换摄像头
		</text>
		<text class="nav-com"  @click="microphone">
			{{isMicrophone?'关闭':'开启'}}麦克风
		</text>
		<text class="nav-com" @click="enableSpeaker">
			{{isEnableSpeaker?'关闭':'开启'}}扬声器
		</text>
	</view>
    <view class="container" :style="{width:windowWidth+'px'}">
		<!-- <RCUniCallView class="smallVideoView" ref="smallVideoView">
		</RCUniCallView> -->
		<!-- <view class="hangup" > -->
			<text class="hangup" @click="hangup">挂断 </text> 
		<!-- </view> -->
	</view>
  </view>
</template>
<script>
  import * as call from "@rongcloud/calllib-uni"
  export default {
    data() {
      return {
        mediaType: "video",
        callType: "out",
        targetId: "",
        bottomHeight: 0,
        isConnected: false,
		isSelf:false,
		viewArr:[],
		callSelect:'single',
		groupId:'',
		userIds:[],
		windowWidth:'',
		windowHeight:'',
		isMicrophone:true,
		isEnableSpeaker:true,
		curCamera:true,
		backCamera:true
      }
    },
    onLoad: function() {
		var _this=this;
		console.log('是否执行自组件onLoad')
		console.log(call);
		uni.getStorage({
        key: "room-parameters",
        success: (res) => {
          this.mediaType = res.data.mediaType;
          this.callType = res.data.callType;
		  this.callSelect = res.data.callSelect;
		  this.groupId = res.data.groupId?res.data.groupId:'';
		  this.userIds = res.data.userIds?res.data.userIds:'';
          if (this.callType === 'out') {
 			  console.log('呼出out')
            this.targetId = res.data.targetId;
            this.startCall();
          } else {
			console.log('呼入接受')
            this.accept();
          }
        }
      });
	  uni.getSystemInfo({
	  	success:function(res){
			_this.windowWidth = res.windowWidth;
			_this.windowHeight = res.windowHeight;
	  	}
	  })
	  uni.$on('OnCallConnected',this.onCallConnected)
	  uni.$on('OnCallDisconnected',this.onCallDisconnected)
    },
	beforeDestroy(){
		uni.$off('OnCallDisconnected');
		uni.$off('OnCallConnected');
	},
    onUnload() {
      const session = call.getCurrentCallSession();
      if (session) {
        call.hangup();
      }
    },
	onHide(){
		console.log(页面隐藏触发);
	    const session = call.getCurrentCallSession();
		if (session) {
		  call.hangup();
		}
	},
    methods: {
	  closeCameraCur(){
		  this.curCamera = !this.curCamera;
		  console.log(this.curCamera)
		  console.log(call)
		  let camera = call.currentCamera();
		  call.enableCamera(this.curCamera,camera)
	  },
	  closeCameraBack(){
		  this.backCamera = !this.backCamera;
		  call.enableCamera(this.backCamera,1)
	  },
	  switchCamera(){
		call.switchCamera();
	  },
	  microphone(){
		this.isMicrophone = !this.isMicrophone;
		call.enableMicrophone(this.isMicrophone);
	  },
	  enableSpeaker(){
		  this.isEnableSpeaker = !this.isEnableSpeaker;
		  call.enableSpeaker(this.enableSpeaker);
	  },
      hangup() {
		this.isSelf = true;
		console.log('挂断中')
        call.hangup();
		uni.navigateBack({
			delta:1
		})
		//挂断返回上一级
		// uni.navigateBack();
      },
      accept() {
		  call.accept();
      },
      startCall() {
		  if(this.callSelect === 'single'){
			  if (this.targetId.length > 0) {
			    const type = this.mediaType === 'audio' ? 0 : 1;
				call.startSingleCall(this.targetId, type, null);
			    var session = call.getCurrentCallSession();
				// call.setVideoView(session.mine.userId, this.$refs.smallVideoView.ref, 0);
				switch(uni.getSystemInfoSync().platform){
				    case 'android':
				       call.setVideoView(session.mine.userId, this.$refs.bigVideoView.ref, 0,false);
				       break;
				    case 'ios':
				       call.setVideoView(session.mine.userId, this.$refs.bigVideoView.ref, 0);
				       break;
				    default:
				       console.log('运行在开发者工具上')
				       break;
				}
			    
			  }
		  }else{
			  const type = this.mediaType === 'audio' ? 0 : 1;
			  call.startGroupCall(this.groupId, this.userIds,[] , type, '');
			  var session = call.getCurrentCallSession();
			  switch(uni.getSystemInfoSync().platform){
			      case 'android':
			         call.setVideoView(session.mine.userId, this.$refs.bigVideoView.ref, 0,false);
			         break;
			      case 'ios':
			         call.setVideoView(session.mine.userId, this.$refs.bigVideoView.ref, 0);
			         break;
			      default:
			         console.log('运行在开发者工具上')
			         break;
			  }
		  }
        
      },
      onCallConnected() {
		  let context = this;
		  console.log('oncallconnected接收了')
        if (this.mediaType === 'video') {
          call.enableSpeaker(true);
          var session = call.getCurrentCallSession();
          if (session && session.users.length > 0) {
			  switch(uni.getSystemInfoSync().platform){
			      case 'android':
			         call.setVideoView(session.mine.userId, this.$refs.smallVideoView.ref, 0,true);
			         break;
			      case 'ios':
			         call.setVideoView(session.mine.userId, this.$refs.smallVideoView.ref, 0);
			         break;
			      default:
			         console.log('运行在开发者工具上')
			         break;
			  }
			
			this.viewArr = session.users.filter((item)=>{
				return item.userId !== session.mine.userId;
			});
			this.$nextTick(()=>{
				this.viewArr.forEach((itm)=>{
					switch(uni.getSystemInfoSync().platform){
					    case 'android':
					       call.setVideoView(itm.userId, context.$refs.bigVideoView.ref, 0,false);
					       break;
					    case 'ios':
					       call.setVideoView(itm.userId, context.$refs.bigVideoView.ref, 0);
					       break;
					    default:
					       console.log('运行在开发者工具上')
					       break;
					}
					
				});
			})
			
			
          }
        }
        this.isConnected = true;
      },
      onCallDisconnected() {
		  console.log('挂断');
		  if(!this.isSelf){
			  uni.navigateBack({
			  	delta:1
			  })
		  }
		  
      }
    }
  }
</script>

<style scoped>  .content {    flex: 1;	flex-direction: column;    position: relative;
	/* background: pink; */  }  .content-view{	  flex: 1;	  background-color: #000000;  }
  .commView{
	  position: relative;
	  margin-bottom: 20upx;
	  flex: 1;
	  flex-direction: row;
	  height: 300upx;
  }
  .commView .bigVideoView{
	  flex: 1;
	  /* background: blue; */
  }
  .smallVideoView{
	  position: absolute;
	  right: 0;
	  top: 50upx;
	  width: 200upx;
	  height: 200upx;
	  /* background: pink; */
  }
  .r{
	  background: red;
  }
 /* video{
	  flex: 1;
  } */
  .commView .comm-show{
	  flex: 1;
	  margin-bottom: 20upx;
	  /* background: pink; */
  }  .container {
	  position: absolute;
	  bottom: 50upx;
	  height: 100upx;
	  background: red;
	  flex-direction: row;
	  justify-content: center;
	  
	  /* justify-content: space-between; */  }
  .nav{
	  position: absolute;
	  bottom: 200upx;
	  right: 0;
	  
  }
  
  .camera{
	  background: #ccc;
  }
  .nav1{
	  position: absolute;
	  bottom: 300upx;
	  right: 0;
  }
  .nav-com{
	  /* flex:1; */
	  margin-top: 10upx;
	  color: #fff;
	  background: rgba(0,0,0,0.5);
	  /* background-color: #ccc; */
	  justify-content: center;
	  align-items: center;
  }
  .hangup{
	  flex: 1;
	  height: 100upx;
	  color: #fff;
	  text-align: center;
	  line-height: 100upx;
	  /* background: blue; */
  }</style>